{"ast":null,"code":"var _jsxFileName = \"/home/wasi/asign/data-peace/src/components/Users.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nexport default class Users extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://demo9197058.mockable.io/users\").then(res => res.json()).then(result => {\n      console.log(result);\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n      console.log(this.state);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          items = _this$state.items;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, items.map(item => React.createElement(\"li\", {\n        key: item.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, item.name, \" \", item.price)));\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/wasi/asign/data-peace/src/components/Users.js"],"names":["React","Component","PropTypes","Users","constructor","props","state","error","isLoaded","items","componentDidMount","fetch","then","res","json","result","console","log","setState","render","message","map","item","name","price"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AACzCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,sCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAIKG,MAAD,IAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEF,WAAKG,QAAL,CAAc;AACZV,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,KAAK,EAAEM;AAFK,OAAd;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAjB;AAED,KAbL,EAcI;AACA;AACA;AACCC,IAAAA,KAAD,IAAW;AACT,WAAKW,QAAL,CAAc;AACZV,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAtBL;AAwBD;;AAEDY,EAAAA,MAAM,GAAG;AAAA,wBAC4B,KAAKb,KADjC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,QADR,eACQA,QADR;AAAA,UACkBC,KADlB,eACkBA,KADlB;;AAEP,QAAIF,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACa,OAAnB,CAAP;AACD,KAFD,MAEO,IAAI,CAACZ,QAAL,EAAe;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,KAAK,CAACY,GAAN,CAAUC,IAAI,IACb;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,IAAI,CAACC,IADR,OACeD,IAAI,CAACE,KADpB,CADD,CADH,CADF;AASD;AACF;;AAtDsC","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          items: []\n        };\n      }\n    \n      componentDidMount() {\n        fetch(\"http://demo9197058.mockable.io/users\")\n          .then(res => res.json())\n          .then(\n              \n            (result) => {\n                console.log(result);\n                \n              this.setState({\n                isLoaded: true,\n                items: result\n              });\n              console.log(this.state);\n              \n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n      }\n    \n      render() {\n        const { error, isLoaded, items } = this.state;\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n          return (\n            <ul>\n              {items.map(item => (\n                <li key={item.name}>\n                  {item.name} {item.price}\n                </li>\n              ))}\n            </ul>\n          );\n        }\n      }\n}\n"]},"metadata":{},"sourceType":"module"}